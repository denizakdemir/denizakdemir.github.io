year_month = format(date, "%Y-%m"),
# Standardize continuous predictors
market_return_std = scale(market_return)[,1],
vix_change_std = scale(vix_change)[,1]
)
print(paste("Dataset contains", nrow(data), "observations across",
n_distinct(data$symbol), "assets"))
# Install sommer if needed
if (!require(sommer)) install.packages("sommer")
library(sommer)
# Define comprehensive asset characteristics
asset_characteristics <- data.frame(
symbol = c("IWM", "EFA", "EEM", "AGG", "TLT", "GLD", "DBC", "VNQ", "HYG"),
# Basic classification
asset_class = c("Equity", "Equity", "Equity", "Bond", "Bond",
"Commodity", "Commodity", "Real_Estate", "Bond"),
geography = c("US", "Developed", "Emerging", "US", "US",
"Global", "Global", "US", "US"),
# Risk characteristics
volatility_regime = c("High", "Medium", "High", "Low", "Medium",
"Medium", "High", "High", "Medium"),
duration = c(0, 0, 0, 5, 20, 0, 0, 0, 4),
credit_quality = c(NA, NA, NA, "AAA", "AAA", NA, NA, NA, "BB"),
# Factor exposures (these would come from regression analysis in practice)
equity_beta = c(1.2, 0.9, 1.1, 0.1, -0.2, 0.2, 0.4, 0.8, 0.5),
inflation_beta = c(0.1, 0.1, 0.2, -0.3, -0.8, 0.7, 0.9, 0.5, 0.2),
liquidity = c("High", "High", "Medium", "High", "High",
"Medium", "Low", "Medium", "Medium")
)
# Function to create a relationship matrix from characteristics
create_relationship_matrix <- function(characteristics, features, method = "cosine") {
# Extract relevant features and create matrix
feature_matrix <- characteristics[, features, drop = FALSE]
# Handle different data types
numeric_features <- sapply(feature_matrix, is.numeric)
# For categorical variables, create dummy variables
if (any(!numeric_features)) {
cat_data <- feature_matrix[, !numeric_features, drop = FALSE]
dummy_matrices <- lapply(cat_data, function(x) {
model.matrix(~ x - 1)
})
cat_matrix <- do.call(cbind, dummy_matrices)
# Combine with numeric features
if (any(numeric_features)) {
num_matrix <- as.matrix(feature_matrix[, numeric_features, drop = FALSE])
# Standardize numeric features
num_matrix <- scale(num_matrix)
feature_matrix <- cbind(num_matrix, cat_matrix)
} else {
feature_matrix <- cat_matrix
}
} else {
feature_matrix <- scale(as.matrix(feature_matrix))
}
n_assets <- nrow(feature_matrix)
if (method == "cosine") {
# Cosine similarity (good for high-dimensional features)
norms <- sqrt(rowSums(feature_matrix^2))
relationship_matrix <- feature_matrix %*% t(feature_matrix) / (norms %o% norms)
} else if (method == "gaussian") {
# Gaussian kernel (captures non-linear relationships)
relationship_matrix <- matrix(0, n_assets, n_assets)
sigma <- median(dist(feature_matrix))  # Bandwidth parameter
for (i in 1:n_assets) {
for (j in 1:n_assets) {
distance <- sum((feature_matrix[i,] - feature_matrix[j,])^2)
relationship_matrix[i,j] <- exp(-distance / (2 * sigma^2))
}
}
}
# Ensure positive definiteness and proper scaling
diag(relationship_matrix) <- 1
rownames(relationship_matrix) <- characteristics$symbol
colnames(relationship_matrix) <- characteristics$symbol
# Make sure it's positive definite
eigen_decomp <- eigen(relationship_matrix)
if (any(eigen_decomp$values < 1e-6)) {
# Fix negative eigenvalues
eigen_decomp$values[eigen_decomp$values < 1e-6] <- 1e-6
relationship_matrix <- eigen_decomp$vectors %*%
diag(eigen_decomp$values) %*%
t(eigen_decomp$vectors)
# IMPORTANT: Restore dimension names after matrix multiplication
rownames(relationship_matrix) <- characteristics$symbol
colnames(relationship_matrix) <- characteristics$symbol
}
return(as.matrix(relationship_matrix))  # Ensure it's a proper matrix
}
# Create different relationship matrices capturing different aspects
# 1. Asset class similarity (captures broad category effects)
K_class <- create_relationship_matrix(asset_characteristics,
c("asset_class", "geography"),
method = "cosine")
# 2. Risk characteristic similarity (captures risk profile relationships)
K_risk <- create_relationship_matrix(asset_characteristics,
c("volatility_regime", "duration", "liquidity"),
method = "gaussian")
# 3. Factor exposure similarity (captures systematic factor relationships)
K_factor <- create_relationship_matrix(asset_characteristics,
c("equity_beta", "inflation_beta"),
method = "cosine")
# 4. Combined similarity (weighted average)
K_combined <- 0.4 * K_class + 0.3 * K_risk + 0.3 * K_factor
# Ensure dimension names are preserved after matrix operations
rownames(K_combined) <- rownames(K_class)
colnames(K_combined) <- colnames(K_class)
# Convert to proper matrix format
K_combined <- as.matrix(K_combined)
# Visualize the combined relationship matrix
library(reshape2)
library(ggplot2)
# Function to create heatmap for relationship matrices
plot_relationship_matrix <- function(K, title) {
# Convert to long format for ggplot
K_melt <- melt(K)
colnames(K_melt) <- c("Asset1", "Asset2", "Similarity")
p <- ggplot(K_melt, aes(x = Asset1, y = Asset2, fill = Similarity)) +
geom_tile() +
scale_fill_gradient2(low = "darkblue", mid = "white", high = "darkred",
midpoint = mean(K)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = title,
x = "", y = "") +
coord_fixed()
ggplotly(p)
}
# Create plot for the combined matrix
plot_relationship_matrix(K_combined, "Combined Asset Similarity Matrix")
# Print similarity between select asset pairs to build intuition
cat("\nExample Similarities (Combined Matrix):\n")
cat("IWM-EFA (both equities):", round(K_combined["IWM", "EFA"], 3), "\n")
cat("AGG-TLT (both bonds):", round(K_combined["AGG", "TLT"], 3), "\n")
cat("IWM-GLD (equity vs gold):", round(K_combined["IWM", "GLD"], 3), "\n")
cat("GLD-DBC (both commodities):", round(K_combined["GLD", "DBC"], 3), "\n")
# Prepare data for sommer
# Ensure assets are in the same order as relationship matrices
assets_ordered <- rownames(K_combined)
data_sommer <- data %>%
filter(symbol %in% assets_ordered) %>%
mutate(
# Ensure symbol is a factor with correct levels
symbol = factor(symbol, levels = assets_ordered),
# Time effects
time_factor = as.factor(year_month),
# Regime effects
regime_factor = as.factor(regime)
)
cat("\nData prepared for sommer:\n")
cat("Observations:", nrow(data_sommer), "\n")
cat("Assets:", length(assets_ordered), "\n")
cat("Time periods:", n_distinct(data_sommer$time_factor), "\n")
data_sommer
# Fit the full model using our combined similarity matrix
cat("Fitting final mixed model...\n")
# Using a subset for speed in this example. For production, use the full dataset.
data_sample <- data_sommer
model_best <- mmer(
fixed = return ~ market_return_std + vix_change_std + regime_factor,
random = ~ vsr(symbol, Gu = K_combined) + time_factor,
data = data_sample,
verbose = FALSE
)
# Display variance components
var_comp_best <- summary(model_best)$varcomp
kable(var_comp_best, caption = "Variance Component Analysis of the Best Model")
# Extract BLUPs (Best Linear Unbiased Predictors)
blups <- model_best$U
# Asset effects (our "breeding values")
asset_effects <- blups[[grep("symbol", names(blups))]][[1]]
names(asset_effects) <- assets_ordered
# Add fitted values and residuals back to the main data
data_sommer$fitted <- predict(model_best, D = data_sommer)
model_best
# Add fitted values and residuals back to the main data
data_sommer$fitted <- predict(model_best)
# Add fitted values and residuals back to the main data
data_sommer$fitted <- predict(model_best, D = data_sommer)
# Extract BLUPs (Best Linear Unbiased Predictors)
blups <- model_best$U
# Asset effects (our "breeding values")
asset_effects <- blups[[grep("symbol", names(blups))]][[1]]
names(asset_effects) <- assets_ordered
# Add fitted values and residuals back to the main data
data_sommer$fitted <- predict(model_best, D = data_sommer)
data_sommer$fitted
predict(model_best, D = data_sommer)
asset_effects
# Add fitted values and residuals back to the main data
data_sommer$fitted <- predict(model_best, D = data_sommer)
# Extract BLUPs (Best Linear Unbiased Predictors)
blups <- model_best$U
# Asset effects (our "breeding values")
asset_effects <- blups[[grep("symbol", names(blups))]][[1]]
names(asset_effects) <- assets_ordered
# Add fitted values and residuals back to the main data
data_sommer$fitted <- predict(model_best, D = data_sommer)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Load required libraries
library(tidyverse)    # Data manipulation
library(tidyquant)    # Financial data
library(lme4)         # Mixed models
library(Matrix)       # Matrix operations
library(quadprog)     # Portfolio optimization
library(corrplot)     # Visualizations
library(plotly)       # Interactive plots
library(knitr)        # For kable tables
library(rmdformats)   # For HTML theme
# Set seed for reproducibility
set.seed(123)
# Define our investment universe
tickers <- c(
"SPY",  # S&P 500 (US Large Cap)
"IWM",  # Russell 2000 (US Small Cap)
"EFA",  # International Developed
"EEM",  # Emerging Markets
"AGG",  # US Bonds
"TLT",  # Long-term Treasuries
"GLD",  # Gold
"DBC",  # Commodities
"VNQ",  # Real Estate
"HYG"   # High Yield Bonds
)
# Download 5 years of daily data
end_date <- Sys.Date()
start_date <- end_date - 365*5
# Fetch price data
prices <- tq_get(tickers, from = start_date, to = end_date, get = "stock.prices")
# Calculate returns
returns <- prices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "monthly",
col_rename = "return") %>%
ungroup()
# Visualize asset returns
p_returns <- ggplot(returns, aes(x = date, y = return, color = symbol)) +
geom_line(alpha = 0.7) +
facet_wrap(~symbol, scales = "free_y", ncol = 2) +
theme_minimal() +
labs(title = "Daily Returns for Asset Universe", x = "", y = "Return") +
theme(legend.position = "none")
ggplotly(p_returns)
# Also get market factors (we'll use VIX as an example)
vix <- tq_get("^VIX", from = start_date, to = end_date, get = "stock.prices") %>%
select(date, vix = adjusted)
# Extract BLUPs (Best Linear Unbiased Predictors)
blups <- model_best$U
# Asset effects (our "breeding values")
asset_effects <- blups[[grep("symbol", names(blups))]][[1]]
names(asset_effects) <- assets_ordered
# Add fitted values and residuals back to the main data
data_sommer$fitted <- predict(model_best, D = data_sommer)
model_best
# Add fitted values and residuals back to the main data
data_sommer$fitted <- predict(model_best, D = model_best$data)
# Add fitted values and residuals back to the main data
data_sommer$fitted <- model_best$fitted
data_sommer$residual <- data_sommer$return - data_sommer$fitted
# Decompose returns to visualize systematic vs. residual components
data_sommer <- data_sommer %>%
mutate(systematic_return = fitted - residual)
# Visualize the decomposition for a few assets
sample_assets <- c("IWM", "AGG", "GLD")
p_decomp <- data_sommer %>%
filter(symbol %in% sample_assets) %>%
slice_head(n = 100) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = return, color = "Observed"), size = 0.8) +
geom_line(aes(y = systematic_return, color = "Systematic"), size = 0.8, linetype = "dashed") +
facet_wrap(~ symbol, scales = "free_y") +
scale_color_manual(values = c("Observed" = "black", "Systematic" = "blue")) +
theme_minimal() +
labs(title = "Return Decomposition: Systematic vs. Observed",
subtitle = "Mixed model separates predictable patterns from noise",
y = "Daily Return", color = "Component")
ggplotly(p_decomp)
# Get the random effects
ranef_model <- model_best$U
# Calculate expected returns (annualized) from the model's fitted values
expected_returns_summary <- data_sommer %>%
group_by(symbol) %>%
summarise(
expected_return = mean(fitted) * 252,
systematic_volatility = sd(fitted) * sqrt(252),
idiosyncratic_volatility = sd(residual) * sqrt(252),
total_volatility = sd(return) * sqrt(252)
)
# For display purposes, we can show it sorted
kable(expected_returns_summary %>% arrange(desc(expected_return)),
caption = "Model-Based Expected Returns and Risk Decomposition",
digits = 3)
# For calculations, ensure it's in the master order
expected_returns <- expected_returns_summary %>%
arrange(match(symbol, assets_ordered))
# Now extract covariance matrices
# 1. SYSTEMATIC COVARIANCE (from fitted values)
# This captures only the predictable, factor-driven relationships
fitted_wide <- data_sommer %>%
select(date, symbol, fitted) %>%
pivot_wider(names_from = symbol, values_from = fitted)
data_sommer
# Get the random effects
ranef_model <- model_best$U
# Calculate expected returns (annualized) from the model's fitted values
expected_returns_summary <- data_sommer %>%
group_by(symbol) %>%
summarise(
expected_return = mean(fitted) * 252,
systematic_volatility = sd(fitted) * sqrt(252),
idiosyncratic_volatility = sd(residual) * sqrt(252),
total_volatility = sd(return) * sqrt(252)
)
# For display purposes, we can show it sorted
kable(expected_returns_summary %>% arrange(desc(expected_return)),
caption = "Model-Based Expected Returns and Risk Decomposition",
digits = 3)
# For calculations, ensure it's in the master order
expected_returns <- expected_returns_summary %>%
arrange(match(symbol, assets_ordered))
# Now extract covariance matrices
# 1. SYSTEMATIC COVARIANCE (from fitted values)
# This captures only the predictable, factor-driven relationships
fitted_wide <- data_sommer %>%
select(date, symbol, fitted) %>%
pivot_wider(names_from = symbol, values_from = fitted)
fitted_wide <- data_sommer %>%
select(date, symbol, fitted)
data_sommer
fitted_wide <- data_sommer %>%
select(date, symbol, fitted)
# Now extract covariance matrices
# 1. SYSTEMATIC COVARIANCE (from fitted values)
# This captures only the predictable, factor-driven relationships
fitted_wide <- data_sommer %>%
dplyr::select(date, symbol, fitted) %>%
pivot_wider(names_from = symbol, values_from = fitted)
# Ensure columns are in the master order
fitted_wide <- fitted_wide[, c("date", assets_ordered)]
cov_systematic <- cov(fitted_wide[,-1], use = "complete.obs") * 252  # Annualized
# 2. TOTAL COVARIANCE (for comparison with traditional approach)
returns_wide <- data_sommer %>%
select(date, symbol, return) %>%
pivot_wider(names_from = symbol, values_from = return)
# 2. TOTAL COVARIANCE (for comparison with traditional approach)
returns_wide <- data_sommer %>%
dplyr::select(date, symbol, return) %>%
pivot_wider(names_from = symbol, values_from = return)
# Ensure columns are in the master order
returns_wide <- returns_wide[, c("date", assets_ordered)]
cov_total <- cov(returns_wide[,-1], use = "complete.obs") * 252
# Visualize correlation structures
par(mfrow = c(1, 2))
corrplot(cov2cor(cov_systematic), method = "color", type = "upper",
title = "Systematic Correlations", mar = c(0,0,2,0))
corrplot(cov2cor(cov_total), method = "color", type = "upper",
title = "Total (Sample) Correlations", mar = c(0,0,2,0))
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Load required libraries
library(tidyverse)    # Data manipulation
library(tidyquant)    # Financial data
library(lme4)         # Mixed models
library(Matrix)       # Matrix operations
library(quadprog)     # Portfolio optimization
library(corrplot)     # Visualizations
library(plotly)       # Interactive plots
library(knitr)        # For kable tables
library(rmdformats)   # For HTML theme
# Set seed for reproducibility
set.seed(123)
# Define our investment universe
tickers <- c(
"SPY",  # S&P 500 (US Large Cap)
"IWM",  # Russell 2000 (US Small Cap)
"EFA",  # International Developed
"EEM",  # Emerging Markets
"AGG",  # US Bonds
"TLT",  # Long-term Treasuries
"GLD",  # Gold
"DBC",  # Commodities
"VNQ",  # Real Estate
"HYG"   # High Yield Bonds
)
# Download 5 years of daily data
end_date <- Sys.Date()
start_date <- end_date - 365*5
# Fetch price data
prices <- tq_get(tickers, from = start_date, to = end_date, get = "stock.prices")
# Calculate returns
returns <- prices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "monthly",
col_rename = "return") %>%
ungroup()
# Visualize asset returns
p_returns <- ggplot(returns, aes(x = date, y = return, color = symbol)) +
geom_line(alpha = 0.7) +
facet_wrap(~symbol, scales = "free_y", ncol = 2) +
theme_minimal() +
labs(title = "Daily Returns for Asset Universe", x = "", y = "Return") +
theme(legend.position = "none")
ggplotly(p_returns)
# Also get market factors (we'll use VIX as an example)
vix <- tq_get("^VIX", from = start_date, to = end_date, get = "stock.prices") %>%
select(date, vix = adjusted)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Load required libraries
library(tidyverse)    # Data manipulation
library(tidyquant)    # Financial data
library(lme4)         # Mixed models
library(Matrix)       # Matrix operations
library(quadprog)     # Portfolio optimization
library(corrplot)     # Visualizations
library(plotly)       # Interactive plots
library(knitr)        # For kable tables
library(rmdformats)   # For HTML theme
# Set seed for reproducibility
set.seed(123)
# Define our investment universe
tickers <- c(
"SPY",  # S&P 500 (US Large Cap)
"IWM",  # Russell 2000 (US Small Cap)
"EFA",  # International Developed
"EEM",  # Emerging Markets
"AGG",  # US Bonds
"TLT",  # Long-term Treasuries
"GLD",  # Gold
"DBC",  # Commodities
"VNQ",  # Real Estate
"HYG"   # High Yield Bonds
)
# Download 5 years of daily data
end_date <- Sys.Date()
start_date <- end_date - 365*5
# Fetch price data
prices <- tq_get(tickers, from = start_date, to = end_date, get = "stock.prices")
# Calculate returns
returns <- prices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "monthly",
col_rename = "return") %>%
ungroup()
# Visualize asset returns
p_returns <- ggplot(returns, aes(x = date, y = return, color = symbol)) +
geom_line(alpha = 0.7) +
facet_wrap(~symbol, scales = "free_y", ncol = 2) +
theme_minimal() +
labs(title = "Daily Returns for Asset Universe", x = "", y = "Return") +
theme(legend.position = "none")
ggplotly(p_returns)
# Also get market factors (we'll use VIX as an example)
vix <- tq_get("^VIX", from = start_date, to = end_date, get = "stock.prices") %>%
select(date, vix = adjusted)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Load required libraries
library(tidyverse)    # Data manipulation
library(tidyquant)    # Financial data
library(lme4)         # Mixed models
library(Matrix)       # Matrix operations
library(quadprog)     # Portfolio optimization
library(corrplot)     # Visualizations
library(plotly)       # Interactive plots
library(knitr)        # For kable tables
library(rmdformats)   # For HTML theme
# Set seed for reproducibility
set.seed(123)
# Define our investment universe
tickers <- c(
"SPY",  # S&P 500 (US Large Cap)
"IWM",  # Russell 2000 (US Small Cap)
"EFA",  # International Developed
"EEM",  # Emerging Markets
"AGG",  # US Bonds
"TLT",  # Long-term Treasuries
"GLD",  # Gold
"DBC",  # Commodities
"VNQ",  # Real Estate
"HYG"   # High Yield Bonds
)
# Download 5 years of daily data
end_date <- Sys.Date()
start_date <- end_date - 365*5
# Fetch price data
prices <- tq_get(tickers, from = start_date, to = end_date, get = "stock.prices")
# Calculate returns
returns <- prices %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "monthly",
col_rename = "return") %>%
ungroup()
# Visualize asset returns
p_returns <- ggplot(returns, aes(x = date, y = return, color = symbol)) +
geom_line(alpha = 0.7) +
facet_wrap(~symbol, scales = "free_y", ncol = 2) +
theme_minimal() +
labs(title = "Daily Returns for Asset Universe", x = "", y = "Return") +
theme(legend.position = "none")
ggplotly(p_returns)
# Also get market factors (we'll use VIX as an example)
vix <- tq_get("^VIX", from = start_date, to = end_date, get = "stock.prices") %>%
select(date, vix = adjusted)
# Also get market factors (we'll use VIX as an example)
vix <- tq_get("^VIX", from = start_date, to = end_date, get = "stock.prices") %>%
select(date, vix = adjusted)
install.packages('sommer')
